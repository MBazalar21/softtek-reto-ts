# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: martinbazalar
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: softtek-reto
# "service" is the name of this project. This will also be added to your AWS resource names.
service: softtek-reto

provider:
  name: aws
  runtime: nodejs20.x

plugins:
  - serverless-openapi-documenter

custom:
  documentation:
    version: '1'
    title: 'SWAPI Integration API'
    description: 'API para integrar con SWAPI'
    servers:
      url: https://unyr84j0mi.execute-api.us-east-1.amazonaws.com/dev/
      description: The server dev
    tags: 
      - name: Character
        description: API para obtener información de personajes
      - name: Planet
        description: API para obtener información de planetas
    contact:
      name: Hector
      email: hectormartin1994@gmail.com
    models:
      - name: ErrorResponse
        description: 'Modelo de respuesta para errores'
        contentType: 'application/json'
        schema:
          type: object
          properties:
            message:
              type: string
              description: 'Mensaje de error'
            code:
              type: integer
              description: 'Código de error'
      - name: PeopleListResponse
        description: 'Respuesta con la lista de personajes'
        contentType: 'application/json'
        schema:
          type: object
          properties:
            nombre:
              type: string
              description: 'Nombre del personaje'
            altura:
              type: string
              description: 'Altura del personaje'
            masa:
              type: string
              description: 'Peso del personaje'
            color_cabello:
              type: string
              description: 'Color de cabello del personaje'
            color_piel:
              type: string
              description: 'Color de piel del personaje'
            color_ojos:
              type: string
              description: 'Color de ojos del personaje'
            año_nacimiento:
              type: string
              description: 'Año de nacimiento del personaje'
            género:
              type: string
              description: 'Género del personaje'

functions:
  getCharacter:
    handler: handler.getCharacterApi
    events:
      - http:
          path: character/{id}
          method: get
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
            maxAge: 86400
          request:
            parameters:
              paths:
                id: true
          documentation:
            summary: Obtener un personaje por ID
            description: Retorna la información de un personaje dado su ID.
            tags:
              - Character
            pathParams:
              - name: id
                description: "ID del personaje"
                schema:
                  type: string
            methodResponses:
              - statusCode: 201
                responseBody:
                  description: "Lista de personajes obtenida exitosamente"
                responseModels:
                  application/json: 'PeopleListResponse'
              - statusCode: 404
                responseBody:
                  description: "Personaje no encontrado"
                responseModels:
                  application/json: 'ErrorResponse'
  getCharacterInDb:
    handler: handler.getCharacterApiDb
    events:
      - http:
          path: character/database/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
  createCharacter:
    handler: handler.createCharacterApi
    timeout: 60
    memorySize: 1024
    events:
      - http:
          path: character
          method: post
  getPlanet:
    handler: handler.getPlanetApi
    events:
      - http:
          path: planet/{id}
          method: get
          request:
            parameters:
              paths:
                id: true     
  api:
    handler: handler.handler
    events:
      - httpApi: "*"

package:
  individually: true